{"version":3,"file":"component---src-templates-event-template-js-07a07718dbaae5d11591.js","mappings":"kNA8BA,MA5BcA,IAA+B,IAA9B,SAAEC,EAAQ,WAAEC,GAAYF,EAWrC,OARKC,EAASE,SAAS,YAAa,KAClCF,EAAWA,EAASG,QAAS,YAAa,6BAEvCH,EAASE,SAAS,2BAA4B,KACjDF,EAAWA,EAASG,QAAS,WAAY,WAKzCC,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAAA,UACEE,IAAKN,EACLO,MAAON,EACPO,YAAY,IACZC,MAAM,0EACNC,sBAAsB,OACtBC,mBAAmB,OACnBC,iBAAe,EACfC,KAAK,IACLC,IAAI,MAEF,EC8EV,MA/FsBf,IAA4B,IAA3B,KAAEgB,EAAI,YAAEC,GAAajB,EAC1C,MAAM,EAAEkB,IAAMC,EAAAA,EAAAA,KACRC,EAAQJ,EAAKK,KAIbb,EAAQY,GAASA,EAAMZ,MAAQY,EAAMZ,MAAQU,EAAE,iBACrDI,QAAQC,IAAI,SAAUf,GAItB,MAAMgB,EAAQJ,GAASA,EAAMI,MAAQJ,EAAMI,MAAMC,MAAM,MAAQ,KAOzDC,GAHSN,GAASA,EAAMO,QAASP,EAAMO,OAAOF,MAAM,MAG1CL,GAASA,EAAMM,QAAUN,EAAMM,QAAQD,MAAM,MAAQ,MAI/DG,EAAQR,GAASA,EAAMQ,MAAQR,EAAMQ,MAAMH,MAAM,MAAQ,KAgB/D,OAdAH,QAAQC,IAAI,MAeVlB,EAAAA,cAACwB,EAAAA,EAAM,CAACZ,YAAaA,EAAaa,UAAWtB,GAC3CH,EAAAA,cAAC0B,EAAAA,EAAG,CAACvB,MAAOA,IAEZH,EAAAA,cAAA,WACGe,EACCf,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAIe,EAAMY,KAAK,KAAGZ,EAAMa,KAAK,KAAGb,EAAMc,MAAM,KAAGhB,EAAE,aAChDE,EAAMe,UAAa9B,EAAAA,cAAAA,EAAAA,SAAA,KAAE,IAACA,EAAAA,cAAA,SAAIa,EAAE,aAAa,IAAEE,EAAMe,WAAc,KAAQ,KACvEf,EAAMgB,YAAe/B,EAAAA,cAAAA,EAAAA,SAAA,KAAE,IAACA,EAAAA,cAAA,SAAIe,EAAMgB,aAAgB,KAAQ,KAE1DhB,EAAMI,MAASnB,EAAAA,cAAAA,EAAAA,SAAA,KACdA,EAAAA,cAAA,UACGa,EAAE,SACDM,EAAMa,OAAS,EAAK,IAAM,IAE7Bb,EAAMc,KAAI,CAACC,EAAKC,IACfnC,EAAAA,cAACoC,EAAK,CAACxC,SAAUsC,EAAKrC,WAAYkB,EAAMZ,WAEpC,GAEPkB,EAAWrB,EAAAA,cAAAA,EAAAA,SAAA,KACVA,EAAAA,cAAA,UACGa,EAAE,WACDQ,EAAQW,OAAS,EAAK,IAAM,IAEhChC,EAAAA,cAAA,UACGqB,EAAQY,KAAI,CAACC,EAAKC,IACjBnC,EAAAA,cAAA,MAAIqC,IAAKF,GACPnC,EAAAA,cAACsC,EAAAA,GAAI,CAACC,KAAML,EAAKM,OAAO,SAAS9B,IAAI,uBAAuBwB,QAI5D,GAEPX,EAASvB,EAAAA,cAAAA,EAAAA,SAAA,KACRA,EAAAA,cAAA,UACGa,EAAE,UAELb,EAAAA,cAAA,UACGuB,EAAMU,KAAI,CAACC,EAAKC,IACfnC,EAAAA,cAAA,MAAIqC,IAAKF,GACPnC,EAAAA,cAACsC,EAAAA,GAAI,CAACC,KAAML,EAAKM,OAAO,SAAS9B,IAAI,uBAAuBwB,QAI5D,IAIVlC,EAAAA,cAAA,WAAMa,EAAE,mBAGL,C","sources":["webpack://solange.dev/./src/components/video.jsx","webpack://solange.dev/./src/templates/event-template.js"],"sourcesContent":["import React from \"react\"\r\n\r\nconst Video = ({ videoURL, videoTitle }) => {\r\n\r\n  //https://developers.google.com/youtube/player_parameters\r\n  if ( videoURL.includes(\"youtu.be/\", 0) ) {\r\n    videoURL = videoURL.replace (\"youtu.be/\", \"www.youtube.com/watch?v=\")\r\n  }\r\n  if ( videoURL.includes(\"www.youtube.com/watch?v=\", 0) ) {\r\n    videoURL = videoURL.replace (\"watch?v=\", \"embed/\")\r\n  }\r\n  //console.log (\"videoURL:\", videoURL, \"\\n\")\r\n\r\n  return (\r\n    <div className=\"responsive-video\">\r\n      <iframe\r\n        src={videoURL}\r\n        title={videoTitle}\r\n        frameBorder=\"0\"\r\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"      \r\n        webkitallowfullscreen=\"true\"\r\n        mozallowfullscreen=\"true\"\r\n        allowFullScreen\r\n        loop=\"1\"\r\n        rel=\"0\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Video\r\n","import * as React from \"react\"\r\nimport { graphql, Link } from \"gatsby\"\r\nimport { useTranslation} from \"react-i18next\"\r\n\r\nimport Layout from \"../components/Layout\"\r\nimport Seo from \"../components/Seo\"\r\nimport Video from \"../components/video\"\r\n\r\n\r\nconst EventTemplate = ({ data, pageContext }) => {\r\n  const { t } = useTranslation()\r\n  const event = data.item\r\n  //console.log(\"EVENT:\", event)\r\n\r\n  //var title = t(\"notTranslated\")\r\n  const title = event && event.title ? event.title : t(\"notTranslated\");\r\n  console.log(\"TITLE:\", title)\r\n  \r\n  //const language = event.fields.locale \r\n  //const language = event.language\r\n  const video = event && event.video ? event.video.split('\\n') : null;\r\n  // if (video)\r\n  //   console.log (\"video:\", video, \"\\n\", video.length)\r\n\r\n  const slides = event && event.slides ? event.slides.split('\\n') : null;\r\n  //console.log (\"slides:\", slides, \"\\n\", slides.length)\r\n  \r\n  const article = event && event.article ? event.article.split('\\n') : null;\r\n  // if (article)\r\n  //   console.log(\"ARTICLE:\", event.article)\r\n\r\n  const links = event && event.links ? event.links.split('\\n') : null;\r\n\r\n  console.log(\"\\n\")\r\n\r\n/*\r\n          {slides ? (<>\r\n            <h3>\r\n              {intl.formatMessage({ id: \"slides\" })}\r\n            </h3>\r\n            <ul>\r\n              {slides.map((urlSlide, index) => (\r\n                <Slides slideURL={urlSlide} slideTitle={event.title} />\r\n              ))}\r\n            </ul>           \r\n          </>) : (\"\")}  \r\n*/\r\n  return (\r\n    <Layout pageContext={pageContext} pageTitle={title}>\r\n      <Seo title={title} />     \r\n\r\n      <div>\r\n        {event ? (\r\n          <>\r\n            <p>{event.type}, {event.date}, {event.local}, {t(\"language\")}</p>\r\n            {event.organizer ? (<> <p>{t(\"organizer\")} {event.organizer}</p> </>) : null}\r\n            {event.description ? (<> <p>{event.description}</p> </>) : null}\r\n\r\n            {event.video ? (<>\r\n              <h3>\r\n                {t(\"video\")}                \r\n                {(video.length > 1) ? \"s\" : \"\"}\r\n              </h3> \r\n              {video.map((url, index) => (\r\n                <Video videoURL={url} videoTitle={event.title} />\r\n              ))}            \r\n            </>) : (\"\")}\r\n\r\n            {article ? (<>          \r\n              <h3>\r\n                {t(\"article\")}                \r\n                {(article.length > 1) ? \"s\" : \"\"}\r\n              </h3>\r\n              <ul>\r\n                {article.map((url, index) => (\r\n                  <li key={index}>\r\n                    <Link href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</Link>\r\n                  </li>\r\n                ))}\r\n              </ul>           \r\n            </>) : (\"\")}\r\n\r\n            {links ? (<>\r\n              <h3>\r\n                {t(\"links\")}\r\n              </h3>\r\n              <ul>\r\n                {links.map((url, index) => (\r\n                  <li key={index}>\r\n                    <Link href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</Link>\r\n                  </li>\r\n                ))}\r\n              </ul>           \r\n            </>) : (\"\")}\r\n\r\n          </>\r\n        ) : (\r\n          <div>{t(\"notTranslated\")}</div>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default EventTemplate\r\n\r\nexport const ItemPageQuery = graphql`\r\n  query ($locale: String!, $slug: String!) {\r\n    item(      \r\n      fields: {locale: {eq: $locale} }, slug: {eq: $slug}\r\n    ) {\r\n      fields {\r\n        locale\r\n        slug\r\n      }      \r\n      article\r\n      date(formatString: \"DD MMMM, YYYY\")\r\n      category\r\n      description\r\n      id\r\n      language\r\n      layout\r\n      links\r\n      local\r\n      marketing      \r\n      organizer\r\n      photos\r\n      slides\r\n      slug\r\n      tags\r\n      title\r\n      type\r\n      video\r\n    }\r\n  }\r\n\r\n`\r\n"],"names":["_ref","videoURL","videoTitle","includes","replace","React","className","src","title","frameBorder","allow","webkitallowfullscreen","mozallowfullscreen","allowFullScreen","loop","rel","data","pageContext","t","useTranslation","event","item","console","log","video","split","article","slides","links","Layout","pageTitle","Seo","type","date","local","organizer","description","length","map","url","index","Video","key","Link","href","target"],"sourceRoot":""}